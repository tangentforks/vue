
<project name="vue" default="vue" basedir=".">

  <description>
    This build file can build all the VUE sources, as well as package
    them into various jar files useful for testing or test
    distribution.  This including a Mac Finder or Windows Explorer
    double-clickable (runnable) jar file that inclues all required
    third party libraries (if java has already been installed on the
    system).  Or it can be run from the command line with:
    
        java -jar VUE.jar
    
    Note that this is really only useful for testing, as it still
    doesn't let us set a VUE icon for the file, or install a JVM if
    one isn't present.  The targets for creating VUE-lib.jar and
    VUE-core.jar are for convenience.  The VUE-lib.jar portion is huge
    and slow to create, whereas VUE-core.jar is just the VUE classes
    and resources, and is quick to create.  This is convenient for
    frequently moving around just VUE-core.jar and running via:

        java -cp VUE-core.jar:VUE-lib.jar tufts.vue.VUE

    Mac Version: a Mac OS X Application directory can be build with
    the mac-dist target. It uses template info in the MacOS directory
    to create build/VUE.app, and then copy the current VUE.jar there,
    at which point it's ready to go as a Mac OS X app.  Just drop the folder
    into /Applications (or wherever you like), double-click it and
    you're off and running.
  </description>

<!-- $Revision: 1.33 $ / $Date: 2005-03-11 04:01:22 $ / $Author: sfraize $ -->
<!-- $Header: /home/svn/cvs2svn-2.1.1/at-cvs-repo/VUE2/src/build.xml,v 1.33 2005-03-11 04:01:22 sfraize Exp $ -->


<!-- ==================== File and Directory Names ======================== -->
<!--
  These properties generally define file and directory names (or paths) that
  affect where the build process stores its outputs.
-->
  <property name="top.dir"     value="./.."/>
  <property name="src"         value="${basedir}"/>
  <property name="build.home"  value="${basedir}/build"/>
  <property name="build.class" value="${build.home}/classes" />
  <property name="dist.home"   value="${basedir}/dist"/>
  <property name="dist.src"    value="${dist.home}/src"/>
  <property name="lib.home"    value="../lib"/>
  <property name="vue.jar"     value="${build.home}/VUE.jar"/>
  <property name="vue-core.jar" value="${basedir}/VUE-core.jar"/>
  <property name="vue-lib.jar"  value="${basedir}/VUE-lib.jar"/>


<!--  ==================== Compilation Control Options ==================== -->
<!--
  These properties control option settings on the Javac compiler when it
  is invoked using the <javac> task.

  compile.debug        Should compilation include the debug option?
  compile.deprecation  Should compilation include the deprecation option?
  compile.optimize     Should compilation include the optimize option?
-->
  <property name="compile.debug"       value="true"/>
  <property name="compile.deprecation" value="true"/>
  <property name="compile.optimize"    value="false"/>


<!-- ==================== Compilation Classpath =========================== -->
<!--
  Rather than relying on the CLASSPATH environment variable, Ant includes
  features that makes it easy to dynamically construct the classpath you
  need for each compilation.
-->

  <path id="runtime.classpath">
    <!-- pathelement path="${java.class.path}"/ -->
    <!-- It is important that we do NOT include java.class.path here, as it contains
         everything ANT needs to run, which includes some jar files that overlap
         with what we include ourselves, but of potentially different versions.
         We need to leave that out to be sure our runtime test classpath is exactly
         the same as the classpath we distribute with -->
    <pathelement path="${build.class}"/>
    <!-- pathelement location="${junit.jar}"/ -->
    <pathelement path="."/>
    <path refid="thirdparty.jarfiles.classpath"/>
  </path>

  <!-- This is the list of 3rd party jar files that VUE uses.  It requires special ordering:
       The jar file okiOSID_v2.jar must load AFTER okiSID_rc6_1.jar -->
  <!-- We have to use a property (as opposed to a fileset) for the
       libraries as we have to preserve the order.  We can't use a filelist
       either (which does preserve order) because we need the list for a
       zipgroupfileset, which requires a string of just the basenames to
       actually create the archive (as opposed to just create a manifest,
       which it mysteriously does unless things are exactly as it wants
       them). -->
  <!-- If we include activation.jar or jhbasic.jar, be sure to manually
       remove signature files from them first (META_INF/SUN_MICR.*), or
       we're DOA.  (It doesn't appear possible to re-bundle them into the
       merge jar file). You'll know you're have this problem if you see
       (this from including jhbasic.jar):
        Exception in thread "main" java.lang.SecurityException:
                no manifiest section for signature file entry Javax/help/resources/Constants_zh.class
  -->
  <!-- Notes about individual jar files: -->
  <!-- jlfgr-1_0.jar: Contains Java toolbarButtonGraphics -->
  <!-- castor-0.9.4.3.jar contains XML, JDO & DAX: we only need the XML in castor-0.9.4.3-xml.jar -->
  <property name="thirdparty.jarfiles.names"
            value="
                   VUE-MacOSX.jar
                   activation_unsigned.jar
                   an_az.jar
                   apache-commons.jar
                   apple-laf.jar
                   avalon-framework-cvs-20020806.jar
                   axis-ant.jar
                   axis-fedora.jar
                   axis.jar
                   batik-awt-util.jar
                   batik-ext.jar
                   batik-svggen.jar
                   batik-util.jar
                   batik.jar
                   castor-0.9.4.3-xml.jar
                   commons-discovery.jar
                   commons-httpclient.jar
                   commons-logging.jar
                   cryptix-asn1.jar
                   cryptix32.jar
                   dom2.jar
                   drSql.jar
                   ecldr.jar
                   fedora-client.jar
                   fedora-server.jar
                   fedoragentypes.jar
                   fedorautilities.jar
                   fop.jar
                   gnu-getopt-1.0.9.jar
                   iTunesDR.jar
                   iPhotosDR.jar
                   jakarta-regexp-1.2.jar
                   jaxrpc.jar
                   jdom.jar
                   jhbasic_unsigned.jar
                   jlfgr-1_0.jar
                   jms.jar
                   jxtaid.jar
                   jxtasecurity.jar
                   log4j-1.2.4.jar
                   log4j-1.2.8.jar
                   mail.jar
                   MRJAdapter.jar
                   mysql.jar
                   okiReversi.jar
                   okiSID_rc6_1.jar
                   okiSIDimpl.jar
                   okiOSID_v2.jar
                   postgresql.jar
                   saaj.jar
                   saxon6.5.jar
                   scorm.jar
                   servlet.jar
                   smete.jar
                   smeteclient.jar
                   splash.jar
                   wsdl4j.jar
                   xalan-2.4.1.jar
                   xerces-1.2.1.jar
                   xercesImpl-2.2.1.jar
                   xercesImpl.jar
                   xml-apis.jar
                   xmlrpc-1.1.jar
                   "/>
  
  <!-- VUE will actually run with this minimal set of jar files, with the exception
     of adding new OSID-DR datasources (e.g., comet.osidimpl.iTunesDR, if you also
     include iTunesDR.jar).  The error message we get when attempting to do that
     doesn't tell us anything about what it can't find, so we're just going to
     go with the overkill list above.  But it looks like with some vetting, we
     could reduce the size of the distriubtion to less than half it's current size. -->
  <property name="thirdparty.jarfiles.names.minimal"
            value="
                   apache-commons.jar
                   axis.jar
                   batik-awt-util.jar
                   batik-ext.jar
                   batik-svggen.jar
                   batik-util.jar
                   castor-0.9.4.3-xml.jar
                   commons-discovery.jar
                   commons-logging.jar
                   dom2.jar
                   fedora-client.jar
                   fedoragentypes.jar
                   fedorautilities.jar
                   fop.jar
                   jaxrpc.jar
                   MRJAdapter.jar
                   okiSID_rc6_1.jar
                   okiOSID_v2.jar
                   saaj.jar
                   xercesImpl.jar
                   "/>
                                                                                                          
  <path id="compile.classpath.common">

    <pathelement path="."/>                
    <pathelement path="${lib.home}/VUE-MacOSX.jar"/>
    <!-- pathelement path="${lib.home}/castor-0.9.4.3.jar"/ contains XML,JDO & DAX - we only need XML-->
    <pathelement path="${lib.home}/castor-0.9.4.3-xml.jar"/>
    <pathelement path="${lib.home}/batik-svggen.jar"/>
    <pathelement path="${lib.home}/batik-awt-util.jar"/>
    <pathelement path="${lib.home}/batik-util.jar"/>
    <pathelement path="${lib.home}/fop.jar"/>
    <pathelement path="${lib.home}/fedorautilities.jar"/>
    <pathelement path="${lib.home}/fedoragentypes.jar"/>
    <pathelement path="${lib.home}/fedora-client.jar"/>
    <pathelement path="${lib.home}/fedora-server.jar"/>
    <pathelement path="${lib.home}/axis.jar"/>
    <pathelement path="${lib.home}/axis-ant.jar"/>
    <pathelement path="${lib.home}/commons-discovery.jar"/>
    <pathelement path="${lib.home}/commons-logging.jar"/>
    <pathelement path="${lib.home}/jaxrpc.jar"/>
    <pathelement path="${lib.home}/log4j-1.2.4.jar"/>
    <pathelement path="${lib.home}/saaj.jar"/>
    <pathelement path="${lib.home}/MRJAdapter.jar"/>
    <pathelement path="${lib.home}/apple-laf.jar"/>
  </path>
    
  <path id="compile.classpath.google">
    <path refid="compile.classpath.common"/>
  </path>


  <path id="compile.classpath.oki">
    <path refid="compile.classpath.common"/>
    <pathelement path="${lib.home}/okiSID_rc6_1.jar"/>
    <pathelement path="${lib.home}/okiOSID_v2.jar"/>
    <pathelement path="${lib.home}/xercesImpl.jar"/>
    <pathelement path="${lib.home}/xml-apis.jar"/>
    <pathelement path="${lib.home}/apache-commons.jar"/>
    
  </path>

  <path id="compile.classpath.oki2">
    <path refid="compile.classpath.common"/>
    <pathelement path="${lib.home}/okiOSID_v2.jar"/>
    <pathelement path="${lib.home}/xercesImpl.jar"/>
    <pathelement path="${lib.home}/xml-apis.jar"/>
    <pathelement path="${lib.home}/apache-commons.jar"/>
    
  </path>

  <path id="compile.classpath.oki1and2">
    <path refid="compile.classpath.common"/>
    <pathelement path="${lib.home}/okiSID_rc6_1.jar"/>
    <pathelement path="${lib.home}/okiOSID_v2.jar"/>
    <pathelement path="${lib.home}/xercesImpl.jar"/>
    <pathelement path="${lib.home}/xml-apis.jar"/>
    <pathelement path="${lib.home}/apache-commons.jar"/>
    
  </path>

  <path id="compile.classpath.vue">
    <path refid="compile.classpath.common"/>
    <pathelement path="${lib.home}/okiSID_rc6_1.jar"/>
    <pathelement path="${lib.home}/okiOSID_v2.jar"/>
    <pathelement path="${lib.home}/xercesImpl.jar"/>
    <pathelement path="${lib.home}/xml-apis.jar"/>
    <pathelement path="${lib.home}/apache-commons.jar"/>
    <!-- pathelement path="${lib.home}/MRJAdapter.jar"/ not working, unknown why -->
  </path>


<!-- ==================== Prepare Target ================================== -->
<!--
  The "prepare" target is used to create the "build" destination directory,
  and copy the static contents of your web application to it.  If you need
  to copy static files from external dependencies, you can customize the
  contents of this task.

  Normally, this task is executed indirectly when needed.
-->

  <target name="prepare">

    <!-- Determine if Java 1.4 is available on this machine -->
    <condition property="java1.4.present"> 
      <equals arg1="${ant.java.version}" arg2="1.4" /> 
    </condition>
    
    <!-- Set Ant batch file based on test for platform -->
    <condition property="ant.exec" value="ant.bat"> 
      <os family="windows"/>
    </condition>
    <condition property="ant.exec" value="ant"> 
      <not>
        <os family="windows"/>
      </not>
    </condition>
    <mkdir dir="${build.class}"/>
    <tstamp />
  </target>


<!-- ==================== compile Task ================================ -->

  <target name="compile" depends="prepare,version"
    description="Compile Java sources using default javac">
    <!-- echo message="lib.home is ${lib.home}"/ -->

    <javac srcdir="${basedir}"
           destdir="${build.class}"
             debug="${compile.debug}"
        deprecation="${compile.deprecation}"
           optimize="${compile.optimize}"
           listfiles="yes"
           classpath="${lib.home}/VUE-MacOSX.jar"
           >
      <!--classpath refid="compile.classpath.vue"/-->
      <include name="tufts/*.java"/>
      <exclude name="**/tmp/**"/>
      <exclude name="**/bak/**"/>
      <exclude name="**/old/**"/>
    </javac>

    <javac srcdir="${basedir}"
           destdir="${build.class}"
             debug="${compile.debug}"
        deprecation="${compile.deprecation}"
           optimize="${compile.optimize}"
           listfiles="yes"
           >
      <classpath refid="compile.classpath.oki1and2"/>
      <include name="tufts/vue/OsidAsset*.java"/>
      <exclude name="**/tmp/**"/>
      <exclude name="**/bak/**"/>
      <exclude name="**/old/**"/>
    </javac>
    
    <javac srcdir="${basedir}" 
           destdir="${build.class}"
              debug="${compile.debug}"
        deprecation="${compile.deprecation}"
           optimize="${compile.optimize}">
      <classpath refid="compile.classpath.google"/>
      <include name="tufts/google/*.java"/>
      <exclude name="**/tmp/**"/>
      <exclude name="**/bak/**"/>
      <exclude name="**/old/**"/>
    </javac>

    <javac srcdir="${basedir}" 
           destdir="${build.class}"
             debug="${compile.debug}"
        deprecation="${compile.deprecation}"
           optimize="${compile.optimize}"
           listfiles="yes"
           >
      <classpath refid="compile.classpath.oki"/>
      <include name="tufts/oki/**/*.java"/>
      <!-- id is pure 2.0 code (org.osid) we can't use yet -->
      <exclude name="tufts/oki/id/**"/>
      <exclude name="tufts/oki/repository/fedora/*.java"/>
    </javac>

    <javac srcdir="${basedir}" 
           destdir="${build.class}"
             debug="${compile.debug}"
        deprecation="${compile.deprecation}"
           optimize="${compile.optimize}"
           listfiles="yes"
           >
      <classpath refid="compile.classpath.oki2"/>
      <include name="tufts/oki/repository/fedora/*.java"/>
      <exclude name="**/tmp/**"/>
      <exclude name="**/bak/**"/>
      <exclude name="**/old/**"/>
    </javac>

    <javac srcdir="${basedir}" 
           destdir="${build.class}"
             debug="${compile.debug}"
        deprecation="${compile.deprecation}"
           optimize="${compile.optimize}"
           listfiles="yes"
           >
      <classpath refid="compile.classpath.vue"/>
      <include name="tufts/artifact/*.java"/>
      <include name="tufts/vue/**/*.java"/>
      <exclude name="tufts/vue/OsidAsset*.java"/>
      <exclude name="**/macosx/**"/>
      <exclude name="**/tmp/**"/>
      <exclude name="**/bak/**"/>
      <exclude name="**/old/**"/>
    </javac>

  </target>

  
  <!-- Create a classpath based on all the 3rd party jarfiles -->
  <path id="thirdparty.jarfiles.classpath">
    <filelist dir="${lib.home}" files="${thirdparty.jarfiles.names}"/>
  </path>

<!-- ==================== Vue JAR files ================================ -->
  <target name="jar-core"
          depends="compile"
          description="Create VUE-core.jar - a jar file containing all the VUE classes, resources and config files from the CVS tree.">
    <!-- echo message="top.dir is ${top.dir}"/ -->
    <echo message="build.class is ${build.class}"/>
    <antcall target="run-jar-core"/>
  </target>

  <target name="run-jar-core">
    <jar zipfile="${vue-core.jar}" update="true" compress="false" index="true">
      <!--fileset dir="${src}" includes="**/*.xml"/-->
      <fileset dir="${src}" includes="**/*.conf"/>
      <fileset dir="${src}" includes="**/*.properties"/>
      <fileset dir="${src}" includes="tufts/vue/resources/**"/>
      <fileset dir="${src}" includes="tufts/vue/images/**"/>
      <fileset dir="${build.class}"/>
    </jar>
  </target>

  <target name="check-third-party-jars-against_VUE.jar">
    <!-- This target will set the property "vue.jar.current" if the support libraries that go into VUE.jar are 
         already older than the current VUE.jar (meaning, we don't need to rebuild VUE.jar) -->
    <uptodate property="vue.jar.current" targetfile="${vue.jar}">
      <srcfiles dir="${lib.home}" includes="${thirdparty.jarfiles.names}"/>
      <srcfiles dir="." includes="VUE-core.jar"/>
    </uptodate>
  </target>
  
  <target name="jar"
          depends="jar-core,check-third-party-jars-against_VUE.jar" unless="vue.jar.current"
          description="Create VUE.jar - a single, distributable, runnable jar file containing VUE and all supporting libraries.">
    <tstamp/>
    <echo message="Building ${vue.jar}..."/>
    <jar destfile="${vue.jar}" compress="true" index="true" update="false">
      <manifest>
        <attribute name="Description" value="Tufts/MIT VUE 0.9+ (Visual Understanding Environment)"/>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Built" value="${TODAY} ${TSTAMP}"/>
        <attribute name="Build-Platform" value="${os.name} ${os.version} ${os.arch}"/>
        <attribute name="Main-Class" value="tufts.vue.VUE"/>
      </manifest>
      <zipgroupfileset dir="${basedir}" includes="VUE-core.jar"/>
      <zipgroupfileset dir="${lib.home}" includes="${thirdparty.jarfiles.names}"/>
    </jar>
  </target>


  <pathconvert pathsep="," property="info.jarfiles" refid="thirdparty.jarfiles.classpath"/>
  <target name="jar-lib"
          description="Create VUE-lib.jar - a separate jar file containing the kitchen-sink set of third party libraries to run VUE (dev convenience target).">
    <echo message="Jaring: ${info.jarfiles}"/>
    <jar destfile="VUE-lib.jar" compress="false" index="true" update="false">
      <!-- zipgroupfileset is extremely picky and limited: each one can name one dir & one string represeting names from that dir,
        and cannont include sub-items, such as a filelist, which would have been a bit cleaner for an ordered set of jar files. -->
      <zipgroupfileset dir="${lib.home}" includes="${thirdparty.jarfiles.names}"/>
    </jar>
  </target>

  <target name="jar-lib-minimal"
          description="Create VUE-lib-minimal.jar - a jar file containing the minimal set libraries to run VUE (testing).">
    <echo message="Jaring: ${thirdparty.jarfiles.names.minimal}"/>
    <jar destfile="VUE-lib-minimal.jar" compress="true" index="true" update="false">
      <zipgroupfileset dir="${lib.home}" includes="${thirdparty.jarfiles.names.minimal}"/>
    </jar>
  </target>
  
  <target name="mac-lib" depends="prepare"
          description="Create the library containing Mac OS X specific VUE code (Mac OS X platform build only)">
    <!-- Build for stuff that makes use of the Apple com.apple.cocoa.{application,foundation}.* classes
         that reside in /System/Library/Java in Mac OS X, which can access native OS X features via
         classes such as NSWindow, NSApplcation, etc. -->
    <javac srcdir="${basedir}" 
           destdir="${build.class}"
             debug="${compile.debug}"
        deprecation="${compile.deprecation}"
           optimize="${compile.optimize}"
           listfiles="yes"
           classpath="/System/Library/Java"
           >
      <include name="tufts/macosx/**/*.java"/>
    </javac>
    <jar destfile="${lib.home}/VUE-MacOSX.jar" compress="true" index="false" update="false">
      <fileset dir="${build.class}" includes="tufts/macosx/**"/>
    </jar>
  </target>
     
  <target name="all" depends="clean,mac-dist" description="Rebuild everything from scratch."/>

  <target name="clean"
          description="Delete all build and intermediate files, leaving only the sources.">
    <delete dir="${build.home}"/>
    <delete file="VUE-core.jar"/>
    <delete file="VUE-lib.jar"/>
    <delete file="VUE-lib-minimal.jar"/>
  </target>

  <target name="clean-emacs">
    <delete verbose="true">
      <fileset dir="." defaultexcludes="no" includes="**/*~"/>
    </delete>
  </target>
  
  
<!-- ==================== Tasks to run VUE  ================================ -->

    <target name="vue" depends="" description="Run the VUE application.">
      <java classname="tufts.vue.VUE" failonerror="true" fork="true">
        <classpath refid="runtime.classpath"/>
      </java>
    </target>
    
    <target name="vue-mac" depends="" description="Run the VUE application (Mac Look and Feel).">
        <java classname="tufts.vue.VUE" failonerror="true" fork="true">
          <jvmarg value="-Dapple.laf.useScreenMenuBar=true"/>
          <jvmarg value="-Dcom.apple.mrj.application.apple.menu.about.name=VUE"/>
          <arg value="-useMacLookAndFeel"/>
          <classpath refid="runtime.classpath"/>
        </java>
    </target>    
    <target name="vue-mac-metal" depends="" description="Run the VUE application (Mac Look and Feel, Brushed Metal).">
        <java classname="tufts.vue.VUE" failonerror="true" fork="true">
          <jvmarg value="-Dapple.laf.useScreenMenuBar=true"/>
          <jvmarg value="-Dcom.apple.mrj.application.apple.menu.about.name=VUE"/>
          <jvmarg value="-Dapple.awt.brushMetalLook=true"/>
          <arg value="-useMacLookAndFeel"/>
          <classpath refid="runtime.classpath"/>
        </java>
    </target>

    <target name="vuedemo" depends="">
      <java classname="tufts.vue.VUE" failonerror="true" fork="true">
        <classpath refid="runtime.classpath"/>
      </java>
    </target>

    <property name="mac.appdir"    value="${build.home}/VUE.app"/>
    <property name="mac.contents" value="${mac.appdir}/Contents"/>
    <property name="mac.bundle_signature" value="TVUE"/> <!-- must match MacOS/Info.plist CFBundleSignature -->

    <target name="mac-dist-common">
      <mkdir dir="${mac.contents}/MacOS"/>
      <mkdir dir="${mac.contents}/Resources/Java"/>
      <echo file="${mac.contents}/PkgInfo" message="APPL${mac.bundle_signature}"/>
      <copy file="MacOS/JavaApplicationStub" todir="${mac.contents}/MacOS" verbose="true"/>
      <chmod file="${mac.contents}/MacOS/JavaApplicationStub" perm="755" verbose="true"/>
      <copy file="MacOS/VUE.icns" todir="${mac.contents}/Resources" verbose="true"/>
    </target>
    
    <target name="mac-dist" depends="jar,mac-dist-common" description="Creates a Mac OS X distributable Applcation directory.">
      <copy file="MacOS/Info.plist" todir="${mac.contents}" verbose="true"/>
      <copy file="${vue.jar}" todir="${mac.contents}" verbose="true"/>
    </target>

    <target name="mac-dist-dev" depends="jar-core,mac-dist-common">
      <!-- for dev: a quicker build of VUE.app that includes VUE-core.jar & VUE-lib.jar
           separately, skipping the build of VUE.jar that takes forverever.  Uses
           the hacked Info-dev.plist that names to two jars instead of the one VUE.jar.
           Note that you need to make sure you've manually build jar-lib before using this.
           -->
      <copy file="MacOS/Info-dev.plist" tofile="${mac.contents}/Info.plist" verbose="true"/>
      <copy file="${vue-core.jar}" todir="${mac.contents}" verbose="true"/>
      <copy file="${vue-lib.jar}" todir="${mac.contents}" verbose="true"/>
    </target>

    <target name="version">
      <tstamp/>
      <echo file="${build.home}/Version.java">
// generated by ${ant.file}
package tufts.vue;
public final class Version {
public static final String
        Date = "${TODAY}",
        Time = "${TSTAMP}",
        User = "${user.name}",
        Platform = "${os.name} ${os.version} ${os.arch}",
        JVM = "${java.runtime.version}",
        AllInfo = "${TODAY} at ${TSTAMP} by ${user.name} on " + Platform + " JVM " + JVM,
        WhatString = "@(#)VUE: built " + AllInfo;
}
</echo>
    <javac srcdir="${build.home}" 
           destdir="${build.class}"
           optimize="${compile.optimize}"
           listfiles="yes"
           >
      <include name="Version.java"/>
    </javac>
    </target>
    
    <target name="versionOld">
      <exec outputproperty="datestr" executable="date">
        <arg value="+%B %e, %Y"/></exec>
      <buildnumber/>
      <echo file="version.java">
package tufts.vue;
class Version {
        static final String buildDay = "${datestr}";
        static final String buildTime = "${datestr}";
        static final String buildNumber = "${build.number}";
}
      </echo>
    </target>
    

    <!-- ==================== Debugging tasks  ================================ -->
    <target name="info" description="Display Library and Classpath Variables">
      <pathconvert pathsep="," property="info.classpath" refid="runtime.classpath"/>
      <pathconvert pathsep="," property="info.compilepath.common" refid="compile.classpath.common"/>
      <pathconvert pathsep="," property="info.compilepath.vue" refid="compile.classpath.vue"/>
      <echo message="Distribution jar files: ${info.jarfiles}"/>
      <echo message="Runtime classpath: ${info.classpath}"/>
      <echo message="common compile classpath: ${info.compilepath.common}"/>
      <echo message="tufts/vue compile classpath: ${info.compilepath.vue}"/>
    </target>

    <target name="info-jarlib">
      <echo message="Jar Library Extensions Info (jarlib-display test/example)"/>
      <jarlib-display>
        <fileset dir="${lib.home}" includes="${thirdparty.jarfiles.names}"/>
      </jarlib-display>
    </target>

    
</project>


