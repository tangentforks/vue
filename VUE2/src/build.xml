
<project name="vue" default="vuedemo" basedir=".">

<!-- $Revision: 1.3 $ / $Date: 2004-06-03 00:14:28 $ -->


<!-- ==================== File and Directory Names ======================== -->
<!--
  These properties generally define file and directory names (or paths) that
  affect where the build process stores its outputs.
-->
  <property name="top.dir"     value="./.."/>
  <property name="build.home"  value="${basedir}/build"/>
  <property name="build.class" value="${build.home}/classes" />
  <property name="dist.home"   value="${basedir}/dist"/>
  <property name="dist.src"    value="${dist.home}/src"/>
  <property name="lib.home" value="../lib"/>

<!-- ==================== Compilation Classpath =========================== -->
<!--
  Rather than relying on the CLASSPATH environment variable, Ant includes
  features that makes it easy to dynamically construct the classpath you
  need for each compilation.
-->
  <path id="runtime.classpath">
    <pathelement path="${java.class.path}"/>
    <pathelement location="${junit.jar}"/>
    <pathelement path="."/>                
<!--     <pathelement path="${lib.home}/OkiSIDs.jar"/>  -->
    <pathelement path="${lib.home}/activation.jar"/>
    <pathelement path="${lib.home}/an_az.jar"/>
    <pathelement path="${lib.home}/apache-commons.jar"/>
    <pathelement path="${lib.home}/avalon-framework-cvs-20020806.jar"/>
    <pathelement path="${lib.home}/axis-ant.jar"/>
    <pathelement path="${lib.home}/axis-fedora.jar"/>
    <pathelement path="${lib.home}/axis.jar"/>
    <pathelement path="${lib.home}/batik-awt-util.jar"/>
    <pathelement path="${lib.home}/batik-ext.jar"/>
    <pathelement path="${lib.home}/batik-svggen.jar"/>
    <pathelement path="${lib.home}/batik-util.jar"/>
    <pathelement path="${lib.home}/batik.jar"/>
    <pathelement path="${lib.home}/castor-0.9.4.3-xml.jar"/>
    <!-- pathelement path="${lib.home}/castor-0.9.4.3.jar"/ contains XML,JDO & DAX -- we only need XML-->
    <pathelement path="${lib.home}/commons-discovery.jar"/>
    <pathelement path="${lib.home}/commons-httpclient.jar"/>
    <pathelement path="${lib.home}/commons-logging.jar"/>
    <pathelement path="${lib.home}/cryptix-asn1.jar"/>
    <pathelement path="${lib.home}/cryptix32.jar"/>
    <pathelement path="${lib.home}/dom2.jar"/>
    <pathelement path="${lib.home}/drSql.jar"/>
    <pathelement path="${lib.home}/ecldr.jar"/>
    <pathelement path="${lib.home}/fedora-client.jar"/>
    <pathelement path="${lib.home}/fedora-server.jar"/>
    <pathelement path="${lib.home}/fedoragentypes.jar"/>
    <pathelement path="${lib.home}/fedorautilities.jar"/>
    <pathelement path="${lib.home}/fop.jar"/>
    <pathelement path="${lib.home}/gnu-getopt-1.0.9.jar"/>
    <pathelement path="${lib.home}/iTunesDR.jar"/>
    <pathelement path="${lib.home}/iPhotosDR.jar"/>
    <pathelement path="${lib.home}/jakarta-regexp-1.2.jar"/>
    <pathelement path="${lib.home}/jaxrpc.jar"/>
    <pathelement path="${lib.home}/jdom.jar"/>
    <pathelement path="${lib.home}/jhbasic.jar"/>
    <pathelement path="${lib.home}/jlfgr-1_0.jar"/> <!-- Java toolbarButtonGraphics -->
    <pathelement path="${lib.home}/jms.jar"/>
    <pathelement path="${lib.home}/jxtaid.jar"/>
    <pathelement path="${lib.home}/jxtasecurity.jar"/>
    <pathelement path="${lib.home}/log4j-1.2.4.jar"/>
    <pathelement path="${lib.home}/log4j-1.2.8.jar"/>
    <pathelement path="${lib.home}/mail.jar"/>
    <pathelement path="${lib.home}/mysql.jar"/>
    <pathelement path="${lib.home}/okiReversi.jar"/>
    <pathelement path="${lib.home}/okiSID_rc6_1.jar"/>
    <pathelement path="${lib.home}/okiSIDimpl.jar"/>
<!--     <pathelement path="${lib.home}/osid.jar"/>  -->
    <pathelement path="${lib.home}/postgresql.jar"/>
    <pathelement path="${lib.home}/saaj.jar"/>
    <pathelement path="${lib.home}/saxon6.5.jar"/>
    <pathelement path="${lib.home}/scorm.jar"/>
    <pathelement path="${lib.home}/servlet.jar"/>
    <pathelement path="${lib.home}/smete.jar"/>
    <pathelement path="${lib.home}/smeteclient.jar"/>
    <pathelement path="${lib.home}/splash.jar"/>
    <pathelement path="${lib.home}/wsdl4j.jar"/>
    <pathelement path="${lib.home}/xalan-2.4.1.jar"/>
    <pathelement path="${lib.home}/xerces-1.2.1.jar"/>
    <pathelement path="${lib.home}/xercesImpl-2.2.1.jar"/>
    <pathelement path="${lib.home}/xercesImpl.jar"/>
    <pathelement path="${lib.home}/xml-apis.jar"/>
    <pathelement path="${lib.home}/xmlrpc-1.1.jar"/>
  </path>


  <path id="compile.classpath.common">

    <pathelement path="."/>                
    <!-- pathelement path="${lib.home}/castor-0.9.4.3.jar"/ contains XML,JDO & DAX -- we only need XML-->
    <pathelement path="${lib.home}/castor-0.9.4.3-xml.jar"/>
    <pathelement path="${lib.home}/batik-svggen.jar"/>
    <pathelement path="${lib.home}/batik-awt-util.jar"/>
    <pathelement path="${lib.home}/batik-util.jar"/>
    <pathelement path="${lib.home}/fop.jar"/>
    <pathelement path="${lib.home}/okiSID_rc6_1.jar"/>
    <pathelement path="${lib.home}/fedorautilities.jar"/>
    <pathelement path="${lib.home}/fedoragentypes.jar"/>
    <pathelement path="${lib.home}/fedora-client.jar"/>
    <pathelement path="${lib.home}/fedora-server.jar"/>
    <pathelement path="${lib.home}/axis.jar"/>
    <pathelement path="${lib.home}/axis-ant.jar"/>
    <pathelement path="${lib.home}/commons-discovery.jar"/>
    <pathelement path="${lib.home}/commons-logging.jar"/>
    <pathelement path="${lib.home}/jaxrpc.jar"/>
    <pathelement path="${lib.home}/log4j-1.2.4.jar"/>
    <pathelement path="${lib.home}/saaj.jar"/>
  </path>
    
  <path id="compile.classpath.google">
    <path refid="compile.classpath.common"/>
    <pathelement path="${lib.home}/xerces-2_4_0\xercesImpl.jar"/>
    <pathelement path="${lib.home}/xerces-2_4_0\xml-apis.jar"/>
  </path>
  <!-- tufts\google\*.java -->


  <path id="compile.classpath.oki">
    <path refid="compile.classpath.common"/>
    <pathelement path="${lib.home}/xerces-1_2_1.jar"/>
    <pathelement path="${lib.home}/xercesImpl.jar"/>
    <pathelement path="${lib.home}/xerces-2.2.1.jar"/>
    <pathelement path="${lib.home}/xml-apis.jar"/>
    <pathelement path="${lib.home}/apache-commons.jar"/>
    
<!-- 
    tufts\oki\authentication\*.java 
    tufts\oki\authorization\*.java 
    tufts\oki\dr\fedora\*.java 
    tufts\oki\hierarchy\*.java 
    tufts\oki\localFiling\*.java 
    tufts\oki\OsidManager.java 
    tufts\oki\remoteFiling\*.java 
    tufts\oki\shared\*.java
 -->    
  </path>


  <path id="compile.classpath.vue">
    <path refid="compile.classpath.common"/>
    <pathelement path="${lib.home}/xerces-1_2_1.jar"/>
    <pathelement path="${lib.home}/xercesImpl.jar"/>
    <pathelement path="${lib.home}/xerces-2.2.1.jar"/>
    <pathelement path="${lib.home}/xml-apis.jar"/>
    <pathelement path="${lib.home}/apache-commons.jar"/>
    
<!-- 
    tufts\vue\*.java 
    tufts\vue\action\*.java 
    tufts\vue\beans\*.java 
    tufts\vue\filter\*.java 
    tufts\vue\shape\*.java
-->
  </path>

<!-- ==================== Prepare Target ================================== -->
<!--
  The "prepare" target is used to create the "build" destination directory,
  and copy the static contents of your web application to it.  If you need
  to copy static files from external dependencies, you can customize the
  contents of this task.

  Normally, this task is executed indirectly when needed.
-->

  <target name="prepare">

    <!-- Determine if Java 1.4 is available on this machine -->
    <condition property="java1.4.present"> 
      <equals arg1="${ant.java.version}" arg2="1.4" /> 
    </condition>
    
    <!-- Set Ant batch file based on test for platform -->
    <condition property="ant.exec" value="ant.bat"> 
      <os family="windows"/>
    </condition>
    <condition property="ant.exec" value="ant"> 
      <not>
        <os family="windows"/>
      </not>
    </condition>
    

    <!-- copy API license files -->
    <mkdir  dir="${dist.src}/osid"/>
    <copy todir="${dist.src}/osid">
      <fileset dir="${basedir}">
        <include name="SidLicense.java"/>
        <include name="SidImplementationLicense.java"/>
        <include name="SidImplementationLicenseMIT.java"/>
      </fileset>    
    </copy>
    
    <!-- compile license classes. Codegen needs the compiled licenses
         in order to emit the license text into the source files 
    -->
    <mkdir dir="${build.class}"/>
    
    <javac srcdir="${dist.src}" destdir="${build.class}"
              debug="${compile.debug}"
        deprecation="${compile.deprecation}"
           optimize="${compile.optimize}">
      <classpath refid="compile.classpath"/>
      <include name="osid/SidLicense.java"/>
      <include name="osid/SidImplementationLicense.java"/>
      <include name="osid/SidImplementationLicenseMIT.java"/>
    </javac>
    
    <tstamp />
  </target>

<!-- ==================== compile Task ================================ -->

  <target name="compile" depends="prepare"
    description="Compile Java sources using default javac">
    <!-- <mkdir dir="${build.class}"/> -->
  <echo message="lib.home is ${lib.home}"/>

    <javac srcdir="${basedir}" 
              debug="${compile.debug}"
        deprecation="${compile.deprecation}"
           optimize="${compile.optimize}">
      <classpath refid="compile.classpath.google"/>
      <include name="tufts/google/*.java"/>
    </javac>

    <javac srcdir="${basedir}" 
             debug="${compile.debug}"
        deprecation="${compile.deprecation}"
           optimize="${compile.optimize}">
      <classpath refid="compile.classpath.oki"/>
      <include name="tufts/oki/*/*.java"/>
        <!-- 
            tufts\oki\authentication\*.java 
            tufts\oki\authorization\*.java 
            tufts\oki\dr\fedora\*.java 
            tufts\oki\hierarchy\*.java 
            tufts\oki\localFiling\*.java 
            tufts\oki\OsidManager.java 
            tufts\oki\remoteFiling\*.java 
            tufts\oki\shared\*.java
         -->    
    </javac>

    <javac srcdir="${basedir}" 
             debug="${compile.debug}"
        deprecation="${compile.deprecation}"
           optimize="${compile.optimize}">
      <classpath refid="compile.classpath.vue"/>
      <include name="tufts/vue/**/*.java"/>
        <!-- 
            tufts\vue\*.java 
            tufts\vue\action\*.java 
            tufts\vue\beans\*.java 
            tufts\vue\filter\*.java 
            tufts\vue\shape\*.java
        -->
    </javac>
   
   
    </target>


<!-- ==================== vuedemo Task ================================ -->
<!--
  The "Search" target runs the drQuickSearch application.
-->
    <target name="vuedemo" depends="" description="" >

        <java classname="tufts.vue.VUE" failonerror="true" fork="true">
            <classpath>
                <path refid="runtime.classpath"/>
            </classpath>
        </java>
    </target>
</project>


